===
API
===

This section documents the internal APIs and data structures used by SACRO Viewer. This information is primarily useful for developers contributing to the project or integrating with SACRO Viewer programmatically.

Core Models
===========

.. automodule:: sacro.models
   :members:
   :undoc-members:
   :show-inheritance:

ACROOutputs Class
----------------

.. autoclass:: sacro.models.ACROOutputs
   :members:
   :undoc-members:
   :show-inheritance:

The ``ACROOutputs`` class is the primary interface for working with ACRO metadata files. It provides methods for loading, parsing, and accessing research output data.

**Key Methods:**

* ``get_file_path(output, filename)``: Returns the absolute path to an output file
* ``annotate()``: Adds URLs, checksums, and cell indexing to metadata
* ``write()``: Saves modified metadata back to disk (testing helper)

**Key Properties:**

* ``path``: Path to the ACRO metadata file
* ``version``: ACRO format version
* ``config``: Additional configuration from config.json
* ``raw_metadata``: Original JSON metadata before processing

Utility Functions
----------------

.. autofunction:: sacro.models.find_acro_metadata

Automatically detects ACRO metadata files in a directory. Looks for:

1. ``outputs.json`` (preferred filename)
2. Single JSON file in directory
3. Valid ACRO JSON files (if multiple exist, raises error)
4. Creates scaffolded metadata if none found

.. autofunction:: sacro.models.scaffold_acro_metadata

Generates ACRO-compatible metadata for directories without existing metadata. Creates entries for all files as "custom" outputs requiring manual review.

.. autofunction:: sacro.models.load_from_path

Main entry point for loading ACRO outputs from a file path. Includes version compatibility checking.

Views and HTTP API
==================

.. automodule:: sacro.views
   :members:
   :undoc-members:
   :show-inheritance:

HTTP Endpoints
-------------

The Django application exposes several HTTP endpoints for the Electron frontend:

**GET /load**
  Loads a directory and redirects to the main interface

  *Parameters:*

  * ``dirpath``: Absolute path to directory containing outputs

**GET /**
  Main application interface displaying all outputs

  *Parameters:*

  * ``path``: Path to ACRO metadata file

**GET /contents**
  Secure file content delivery

  *Parameters:*

  * ``path``: Path to ACRO metadata file
  * ``output``: Output identifier
  * ``filename``: Requested filename

**POST /review/create**
  Creates a new review with approval decisions

  *Body Parameters:*

  * ``comment``: Overall review comment
  * ``review``: JSON object with approval decisions

**GET /review/<pk>**
  Displays review summary and download options

**POST /approved-outputs/<pk>**
  Generates and downloads ZIP file with approved outputs

**POST /summary/<pk>**
  Generates text summary of review decisions

View Functions
-------------

.. autofunction:: sacro.views.get_filepath_from_request

Safely extracts and validates file paths from HTTP requests.

.. autofunction:: sacro.views.get_outputs_from_request

Loads ACROOutputs instance from request parameters with error handling.

Data Structures
===============

ACRO Metadata Format
--------------------

The ACRO metadata follows a specific JSON schema:

.. code-block:: json

   {
     "version": "0.4.0",
     "results": {
       "output_id": {
         "uid": "unique_identifier",
         "files": [
           {
             "name": "filename.csv",
             "sdc": {
               "cells": {
                 "flag_name": [[row, col], ...]
               }
             }
           }
         ],
         "status": "pass|fail|review",
         "type": "table|plot|custom",
         "properties": {},
         "outcome": {},
         "command": "acro_command_used",
         "summary": "brief_description",
         "exception": null,
         "timestamp": "2023-01-01T12:00:00",
         "comments": ["researcher comments"]
       }
     }
   }

**Field Descriptions:**

* ``version``: ACRO format version for compatibility checking
* ``results``: Dictionary of output objects keyed by unique identifier
* ``uid``: Unique identifier for the output
* ``files``: List of files associated with this output
* ``status``: ACRO assessment result (pass/fail/review)
* ``type``: Output type classification
* ``properties``: Additional metadata about the output
* ``outcome``: ACRO analysis results and warnings
* ``command``: ACRO command that generated the output
* ``summary``: Human-readable summary of ACRO assessment
* ``exception``: Any exception requests from researcher
* ``timestamp``: When the output was generated
* ``comments``: List of researcher-provided comments

File Metadata Structure
----------------------

Each file in the ``files`` array contains:

.. code-block:: json

   {
     "name": "output.csv",
     "url": "/contents?path=...&output=...&filename=...",
     "checksum": "sha256_hash",
     "checksum_valid": true,
     "sdc": {
       "cells": {
         "threshold": [[0, 1], [2, 3]],
         "negative": [[1, 1]]
       }
     },
     "cell_index": {
       "0,1": ["threshold"],
       "2,3": ["threshold"],
       "1,1": ["negative"]
     }
   }

**Annotated Fields:**

* ``url``: Generated URL for secure file access
* ``checksum``: SHA256 hash for integrity verification
* ``checksum_valid``: Boolean indicating if file matches expected checksum
* ``cell_index``: Flattened index of flagged cells for efficient lookup

Review Data Structure
--------------------

Review decisions are stored as:

.. code-block:: json

   {
     "output_id": {
       "state": true,
       "comment": "Approval reason"
     }
   }

Where ``state`` is ``true`` for approved, ``false`` for rejected.

Utility Modules
===============

.. automodule:: sacro.utils
   :members:
   :undoc-members:

URL Generation
-------------

.. autofunction:: sacro.utils.reverse_with_params

Generates URLs with query parameters for the Django application.

Adapters
========

.. automodule:: sacro.adapters
   :members:
   :undoc-members:

Local Audit Adapter
-------------------

.. automodule:: sacro.adapters.local_audit
   :members:
   :undoc-members:

Provides audit logging functionality for review decisions.

.. autofunction:: sacro.adapters.local_audit.log_release

Logs release decisions to local audit trail.

Zipfile Adapter
--------------

.. automodule:: sacro.adapters.zipfile
   :members:
   :undoc-members:

Handles creation of release packages containing approved outputs.

.. autofunction:: sacro.adapters.zipfile.create

Creates in-memory ZIP file with approved outputs and metadata.

.. autofunction:: sacro.adapters.zipfile.get_summary

Generates text summary of review decisions for inclusion in release package.

Error Handling
==============

.. automodule:: sacro.errors
   :members:
   :undoc-members:

Custom Exceptions
----------------

.. autoexception:: sacro.models.MultipleACROFiles

Raised when multiple valid ACRO metadata files are found in the same directory.

.. autoexception:: sacro.models.ACROOutputs.InvalidFile

Raised when a file cannot be parsed as valid ACRO metadata.

Configuration
=============

.. automodule:: sacro.settings
   :members:
   :undoc-members:

Django Settings
--------------

Key configuration options:

* ``DEBUG``: Development mode flag
* ``SECRET_KEY``: Django security key (generated randomly)
* ``ALLOWED_HOSTS``: Restricted to localhost for security
* ``STATIC_URL``: URL prefix for static assets
* ``STATICFILES_DIRS``: Directories containing static files

Versioning
==========

.. automodule:: sacro.versioning
   :members:
   :undoc-members:

Version Compatibility
--------------------

.. autofunction:: sacro.versioning.check_version

Validates ACRO metadata version compatibility with current SACRO Viewer version.

Supported ACRO versions:

* 0.4.0 (current)
* 0.3.x (with warnings)
* Earlier versions may require metadata updates

Development APIs
===============

Testing Utilities
-----------------

The codebase includes several utilities for testing:

**Fixtures**
  * Sample ACRO metadata files
  * Test output files in various formats
  * Checksum files for integrity testing

**Test Helpers**
  * ``ACROOutputs.write()``: Save modified metadata for testing
  * ``scaffold_acro_metadata()``: Generate test metadata
  * Cypress test automation scripts

**Mock Data Generation**
  * ``data/test-nursery.py``: Generates realistic test outputs using ACRO
  * Automated regeneration of test data when needed
  * Configurable output types and scenarios

Integration Points
=================

Electron Integration
-------------------

The Python web application communicates with Electron via:

* **HTTP API**: RESTful endpoints for all operations
* **File URLs**: Secure file serving with validation
* **Token Authentication**: Shared secret for request validation

**Security Considerations:**

* Random token generation on startup
* Localhost-only binding
* Path validation to prevent directory traversal
* File access limited to approved directories

External Tool Integration
------------------------

SACRO Viewer integrates with:

* **ACRO Tools**: Reads metadata generated by ACRO Python library
* **File System**: Direct access to research output files
* **Operating System**: Native file dialogs and associations

**Future Integration Possibilities:**

* **Web Deployment**: Django app can be deployed as web service
* **API Extensions**: Additional endpoints for programmatic access
* **Plugin Architecture**: Extensible output type handlers
